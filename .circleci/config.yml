version: 2.1

orbs:
  aws-cli: circleci/aws-cli@4.1.1

commands:
  deploy:
    description: Deployment of ETL
    parameters:
      hostname:
        type: string
        default: "int-staging.avniproject.org"
      env:
        type: string
        default: "staging"
    steps:
      - attach_workspace:
          at: ~/artifacts

      - run: sudo apt-get install make openssl

      - run: curl -L https://github.com/avniproject/avni-infra/archive/master.zip >> ~/infra.zip

      - run: |
          cd ~/
          unzip infra.zip
          mv avni-infra-master avni-infra
          rm -rf infra.zip

      - run: echo $ANSIBLE_VAULT_PASS > ~/.vault-pass.txt

      - run: |
          pwd
          cd ~/avni-infra/configure
          mv ~/artifacts/avni-etl.jar ~/artifacts/etl-1.0.0-SNAPSHOT.jar
          VAULT_PASSWORD_FILE=~/.vault-pass.txt app_zip_path=~/artifacts/ make deploy-etl-<< parameters.env >>

      - run: rm ~/.vault-pass.txt

  setup_server_access:
    description: Generate and copy temporary keys to server
    parameters:
      instance-id:
        type: string
      os-user:
        type: string
        default: ubuntu
      availability-zone:
        type: string
        default: ap-south-1a
    steps:
      - run: rm -rf /tmp/temp_rsa_key*
      - run: ssh-keygen -b 2048 -t rsa -f /tmp/temp_rsa_key -q -N ""
      - run: eval `ssh-agent -s`
      - run: ssh-add /tmp/temp_rsa_key
      - run: |
          aws ec2-instance-connect send-ssh-public-key --instance-id << parameters.instance-id >> --availability-zone << parameters.availability-zone >> --instance-os-user << parameters.os-user >> --no-paginate --ssh-public-key file:///tmp/temp_rsa_key.pub --output text | head -1

jobs:
  test:
    docker:
      - image: cimg/openjdk:17.0.5

      - image: cimg/postgres:12.7
        environment:
          - POSTGRES_USER: openchs
          - POSTGRES_DB: openchs_test
          - POSTGRES_PASSWORD: password

    working_directory: ~/avni-etl

    environment:
      MAVEN_OPTS: -Xmx3200m

    steps:
      - checkout

      - run: sudo apt-get update

      - run: sudo apt-get install make postgresql-client

      - run: make create-extensions

      - run: wget -qO- https://repo1.maven.org/maven2/org/flywaydb/flyway-commandline/8.5.9/flyway-commandline-8.5.9-linux-x64.tar.gz | tar xvz && sudo ln -s `pwd`/flyway-8.5.9/flyway /usr/local/bin

      - run: curl -L https://github.com/avniproject/avni-server/archive/master.zip >> ~/server.zip

      - run: |
          cd ~/
          unzip server.zip
          mv avni-server-master avni-server
          rm -rf server.zip
      - run: |
          pwd
          cd ~/avni-server
          make deploy_test_schema
      - run: |
          cd ~/avni-etl
          make test
      - store_artifacts:
          path: ~/avni-etl/build/reports/tests/test
          destination: testReports

  build:
    docker:
      - image: cimg/openjdk:17.0.5

    working_directory: ~/avni-etl

    environment:
      - ANSIBLE_HOST_KEY_CHECKING: False
      - ANSIBLE_LOCAL_TEMP: /home/circleci/.ansible/tmp
      - ANSIBLE_REMOTE_TEMP: /home/circleci/.ansible/tmp
      - MAVEN_OPTS: -Xmx3200m

    steps:
      - checkout

      - run: sudo apt-get install make openssl

      - run: make build_jar

      - run: mkdir -p ~/artifacts;

      - run: cp ~/avni-etl/build/libs/etl-1.0.0-SNAPSHOT.jar ~/artifacts/avni-etl.jar;

      - persist_to_workspace:
          root: ~/artifacts
          paths:
            - avni-etl.jar

      - store_artifacts:
          path: ~/artifacts

  STAGING_deploy:
    docker:
      - image: cimg/deploy:2023.09
        environment:
          ANSIBLE_HOST_KEY_CHECKING: no
    working_directory: ~/
    steps:
      - aws-cli/setup:
          role_arn: "arn:aws:iam::118388513628:role/avni_circleci_instance_connect"
          region: "ap-south-1"
      - setup_server_access:
          instance-id: "i-029f9587b33d91f35"
          availability-zone: "ap-south-1a"
      - deploy:
          hostname: "int-staging.avniproject.org"
          env: "staging"

  PRERELEASE_deploy:
    docker:
      - image: cimg/deploy:2023.09
        environment:
          ANSIBLE_HOST_KEY_CHECKING: no
    working_directory: ~/
    steps:
      - aws-cli/setup:
          role_arn: "arn:aws:iam::118388513628:role/avni_circleci_instance_connect"
          region: "ap-south-1"
      - setup_server_access:
          instance-id: "i-0a357dbb9e5a91ca2"
          availability-zone: "ap-south-1b"
      - deploy:
          hostname: "int-prerelease.avniproject.org"
          env: "prerelease"

  PRODUCTION_deploy:
    docker:
      - image: cimg/deploy:2023.09
    working_directory: ~/
    steps:
      - aws-cli/setup:
          role_arn: "arn:aws:iam::118388513628:role/avni_circleci_instance_connect"
          region: "ap-south-1"
      - setup_server_access:
          instance-id: "i-07e5114eea30b3b61"
          availability-zone: "ap-south-1a"
      - deploy:
          hostname: "int-prod.avniproject.org"
          env: "prod"

  RWB_STAGING_deploy:
    docker:
      - image: cimg/deploy:2023.09
    working_directory: ~/
    steps:
      - aws-cli/setup:
          role_arn: "arn:aws:iam::730335671779:role/avni_circleci_instance_connect"
          region: "ap-south-1"
      - setup_server_access:
          instance-id: "i-0b9dc7b3e65a44aec"
          availability-zone: "ap-south-1b"
      - deploy:
          env: "rwb-staging"

  RWB_PRODUCTION_deploy:
    docker:
      - image: cimg/deploy:2023.09
    working_directory: ~/
    steps:
      - aws-cli/setup:
          role_arn: "arn:aws:iam::730335671779:role/avni_circleci_instance_connect"
          region: "ap-south-1"
      - setup_server_access:
          instance-id: "i-067dc4ef8c36f8053"
          availability-zone: "ap-south-1a"
      - deploy:
          env: "rwb-prod"

workflows:
  version: 2
  test_and_build_and_deploy:
    jobs:
    - test
    - build:
        requires:
          - test
    - STAGING_approve:
        type: approval
        requires:
          - build
    - STAGING_deploy:
        context: non-prod-deploy
        filters:
          branches:
            only: main
        requires:
          - STAGING_approve
    - PRERELEASE_approve:
        type: approval
        requires:
          - build
    - PRERELEASE_deploy:
        context: non-prod-deploy
        requires:
          - PRERELEASE_approve
    - PRODUCTION_approve:
        type: approval
        requires:
          - build
    - PRODUCTION_deploy:
        context: prod-deploy
        requires:
          - PRODUCTION_approve
    - RWB_STAGING_approve:
        type: approval
        requires:
          - build
    - RWB_STAGING_deploy:
        context:
          - RWB_AWS_OIDC
          - non-prod-deploy
        requires:
          - RWB_STAGING_approve
    - RWB_PRODUCTION_approve:
        type: approval
        requires:
          - build
    - RWB_PRODUCTION_deploy:
        context:
          - RWB_AWS_OIDC
          - prod-deploy
        requires:
          - RWB_PRODUCTION_approve
